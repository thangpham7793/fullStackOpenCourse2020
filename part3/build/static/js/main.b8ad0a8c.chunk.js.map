{"version":3,"sources":["Components/Button.js","Components/Display.js","Components/Filter.js","Components/Field.js","Components/Form.js","Components/Notification.js","services/http.js","App.js","index.js"],"names":["Button","label","handleClick","dataKey","data-key","onClick","Display","searchPhrase","persons","handleDelete","length","filter","name","toLowerCase","startsWith","map","person","i","key","Object","values","join","id","Filter","newSearchPhrase","handleSearchPhrase","value","onChange","Field","handleValueChange","Form","newValues","handleSubmit","fields","keys","onSubmit","type","Notification","message","includes","className","baseURL","a","axios","get","res","data","newPerson","post","put","console","log","delete","getAll","create","update","remove","App","useState","setPersons","setSearchPhrase","emptyValue","number","setNewValues","setMessage","showThenHideMessage","setTimeout","addDone","deleteDone","updateDone","addFailed","deleteFailed","updateFailed","response","submittedValues","window","confirm","http","then","returnedNewPerson","fetchData","catch","err","recreatePerson","initialPersons","useEffect","e","target","preventDefault","processStr","str","slice","replace","findIndex","createPerson","personToUpdate","find","modifiedPerson","status","updateFailed404","getAttribute","toRemovePersonID","toRemoverPersonName","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8ad0a8c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Button = ({label, handleClick, dataKey}) => {\r\n    return (\r\n        <button data-key={dataKey}\r\n                onClick={handleClick}\r\n        >\r\n            {label}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport Button from './Button'\r\n\r\nconst Display = ({searchPhrase, persons, handleDelete}) => {\r\n\r\n    //display FILTERED persons unless the filter bar is empty \r\n    const personsToShow = searchPhrase.length  \r\n    ? persons.filter(({name}) => \r\n        name\r\n        .toLowerCase()\r\n        .startsWith(searchPhrase.toLowerCase()))\r\n    : persons\r\n    \r\n    return (\r\n        personsToShow.map((person, i) =>\r\n            <li key={i}>\r\n                <p>\r\n                    {Object.values(person)\r\n                           .join(' ')} \r\n                </p>\r\n                <Button dataKey={person.id} \r\n                        label=\"delete\" \r\n                        handleClick={handleDelete}/>\r\n            </li>\r\n        )\r\n    )\r\n}\r\n\r\nexport default Display","import React from 'react'\r\n\r\nconst Filter = ({newSearchPhrase, handleSearchPhrase}) => {\r\n    return (\r\n        <div>\r\n            filter shown with:\r\n            <input \r\n                value={newSearchPhrase}\r\n                onChange={handleSearchPhrase}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst Field = ({name, value, handleValueChange}) => {\r\n    return (\r\n        <div>\r\n          <label>{name}: </label>\r\n            <input \r\n                name={name}\r\n                value={value} \r\n                onChange={handleValueChange} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Field","import React from 'react'\r\nimport Field from './Field'\r\n\r\nconst Form = ({newValues, handleSubmit, handleValueChange}) => {\r\n\r\n    //get keys first to generate a field for each key and update if a new key(field) is added to the form through newValues\r\n    const fields = Object.keys(newValues)\r\n                         .map((key, i) => \r\n                            <Field key={i}\r\n                                   name={key} \r\n                                   value={newValues[key]}\r\n                                   handleValueChange={handleValueChange}\r\n                            />)\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {fields}\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react'\r\nimport '../index.css'\r\n\r\nconst Notification = ({message}) => {\r\n\r\n    if (message.length === 0) return null;\r\n\r\n    return (\r\n        message.toLowerCase().includes('error') \r\n        ? <h2 className='error'>\r\n           {message}\r\n          </h2>\r\n        : <h2 className='success'>\r\n            {message}\r\n          </h2>\r\n    )\r\n        \r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\n//const baseURL = 'http://localhost:3001/api/persons'\r\n//const baseURL = 'https://peaceful-retreat-41072.herokuapp.com/api/persons'\r\nconst baseURL = '/api/persons'\r\nasync function getAll() {\r\n    const res = await axios.get(baseURL)\r\n    return res.data //which is also a promise!!!\r\n}\r\n\r\nasync function create(newPerson) {\r\n    const res = await axios.post(baseURL, newPerson)\r\n    return res.data\r\n}\r\n\r\nasync function update(id, newPerson) {\r\n    const res = await axios.put(`${baseURL}/${id}`, newPerson)\r\n    return res.data\r\n}\r\n\r\nasync function remove(id) {\r\n    console.log(`${baseURL}/${id}`)\r\n    const res = await axios.delete(`${baseURL}/${id}`)\r\n    return res.data\r\n}\r\n\r\nexport default {getAll, create, update, remove}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport Display from './Components/Display'\r\nimport Filter from './Components/Filter'\r\nimport Form from './Components/Form'\r\nimport Notification from './Components/Notification'\r\nimport http from './services/http'\r\n\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([])\r\n  \r\n  //Store all fields inside object newValues, so the form will be updated if a new input field is specified as a key:value pair inside the object newValues\r\n  const [ newSearchPhrase, setSearchPhrase ] = useState('')\r\n  const emptyValue = {name: '', number: ''}\r\n  const [ newValues, setNewValues ] = useState(emptyValue)\r\n  const [message, setMessage] = useState('')\r\n\r\n  const showThenHideMessage = message => name => {\r\n      setMessage(`${message} ${name}`)\r\n      setTimeout(() => setMessage(''), 2000)\r\n  }\r\n  const addDone = showThenHideMessage('Successfully Added')\r\n  const deleteDone = showThenHideMessage('Successfully Deleted')\r\n  const updateDone = showThenHideMessage('Successfully Updated')\r\n  const addFailed = showThenHideMessage('There was an error adding')\r\n  const deleteFailed = showThenHideMessage('There was an error deleting')\r\n  const updateFailed = showThenHideMessage('There was an error updating')\r\n  \r\n  const createPerson = (submittedValues) => {\r\n    http.create(submittedValues)\r\n            .then(returnedNewPerson => {\r\n                setPersons([...persons, returnedNewPerson])\r\n                addDone(submittedValues.name)\r\n                setNewValues(emptyValue)\r\n            })\r\n            .catch(err => addFailed(submittedValues.name))\r\n  }\r\n  \r\n  const recreatePerson = (submittedValues) => {\r\n    http.create(submittedValues)\r\n            .then(returnedNewPerson => {\r\n                setPersons([...persons, returnedNewPerson])\r\n                addDone(submittedValues.name)\r\n                setNewValues(emptyValue)\r\n                fetchData() //reset the view to remove duplicates\r\n            })\r\n            .catch(err => addFailed(submittedValues.name))\r\n  }\r\n\r\n  const response = (name, submittedValues) => {\r\n    if(window.confirm(`Already deleted ${name} Do you wish to re-add ${name}?`)) {\r\n        //re-add the deleted person and reset the view\r\n        setMessage('')\r\n        recreatePerson(submittedValues) //fetchData() is called first, or ...\r\n        } else {\r\n        //reset the view\r\n        setMessage('')\r\n        fetchData()\r\n    }\r\n  }\r\n  const updateFailed404 = (name, submittedValues) => {\r\n    setMessage(`Error: Already deleted ${name}`)\r\n    setTimeout(() => response(name, submittedValues), 1000)\r\n  }\r\n\r\n  const fetchData = () => {\r\n    http.getAll()\r\n        .then(initialPersons => {\r\n          setPersons(initialPersons)\r\n          setMessage('')\r\n        })\r\n        .catch(err => {setMessage('There was an error fetching the data from the server!')\r\n                       setTimeout(() => setMessage(''), 5000)})\r\n  }\r\n\r\n  //get data on first render\r\n  useEffect(() => {\r\n    setMessage('Fetching Data')\r\n    fetchData()\r\n  }, [])\r\n\r\n  //handle user inputs\r\n  const handleValueChange = (e) => { \r\n    setNewValues({\r\n      ...newValues,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n      e.preventDefault()\r\n      const submittedValues = {...newValues}\r\n      const processStr = str => str.slice(0).replace(/\\W|\\d/g, '').toLowerCase()\r\n      //check for name duplicates\r\n      if (persons.findIndex(({name}) => processStr(name) === processStr(submittedValues.name)) === -1) {\r\n          createPerson(submittedValues)        \r\n      } else {\r\n          if (window.confirm(`${submittedValues.name} has already been added! Replace the old number with a new one?`) === false) {\r\n            setNewValues(emptyValue)\r\n            return\r\n          }\r\n          \r\n          const personToUpdate = persons.find(person => person.name === submittedValues.name)\r\n          \r\n          http.update(personToUpdate.id, submittedValues)\r\n              .then(modifiedPerson => {\r\n                setPersons(persons\r\n                            .map(person => \r\n                              person.id === modifiedPerson.id \r\n                              ? modifiedPerson \r\n                              : person))\r\n                updateDone(personToUpdate.name)\r\n                setNewValues(emptyValue)\r\n              })\r\n              .catch(err => {\r\n                if (err.response.status === 404) {\r\n                  updateFailed404(personToUpdate.name, submittedValues)\r\n              } else {\r\n                updateFailed(personToUpdate.name)\r\n              }\r\n        })\r\n      }      \r\n  }\r\n\r\n  const handleDelete = (e) => {\r\n    console.log(e.target.getAttribute('data-key'));\r\n    \r\n    const toRemovePersonID = e.target.getAttribute('data-key')\r\n    const toRemoverPersonName = persons.filter(({id}) => id.toString() === toRemovePersonID)[0].name\r\n    http.remove(toRemovePersonID)\r\n        .then(res => {setPersons(persons.filter(({id}) => id.toString() !== toRemovePersonID))\r\n                      deleteDone(toRemoverPersonName)\r\n        })\r\n        .catch(err => deleteFailed(toRemoverPersonName))\r\n  }\r\n\r\n  const handleSearchPhrase = (e) => setSearchPhrase(e.target.value)\r\n\r\n  return (\r\n    <div>\r\n      <h1>UPDATED PHONEBOOK</h1>\r\n\r\n      <Notification message={message}/>\r\n      \r\n      <Filter newSearchPhrase={newSearchPhrase}\r\n              handleSearchPhrase={handleSearchPhrase}\r\n      />\r\n      \r\n      <h2>New Entry</h2>\r\n      <Form newValues={newValues} handleSubmit={handleSubmit} handleValueChange={handleValueChange}/>\r\n      \r\n      {/* Display added persons */}\r\n      <h3>Added</h3>\r\n      <ul>\r\n\r\n          { persons.length === 0 \r\n            ? <h4>Fetching Data</h4>\r\n            : <Display persons={persons} \r\n                       searchPhrase={newSearchPhrase}\r\n                       handleDelete={handleDelete} />\r\n          }\r\n          \r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}